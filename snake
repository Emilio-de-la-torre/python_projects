import turtle
#Ritmo del programa
import time
import random

posponer=0.1

#Marcador
score = 0
high_score = 0

#Configuración de la ventana
wn=turtle.Screen()
wn.title("Juego de Snake")
wn.bgcolor("black")
wn.setup(width=600, height=600)
wn.tracer(0)

#Cabeza de la serpiente
cabeza=turtle.Turtle()
cabeza.speed(10)
cabeza.shape("square")
cabeza.color("white")

#Comando para no dejar rastro
cabeza.penup()

#Comando para la posición inicial de la serpiente
cabeza.goto(0,0)
cabeza.direction="stop"

#Comida
comida=turtle.Turtle()
comida.speed(0)
comida.shape("circle")
comida.color("red")
comida.penup()
comida.goto(0,100)

#Cuerpo de la serpiente/Segmentos
segmentos=[]

#Texto
texto = turtle.Turtle()
texto.speed(0)
texto.color("white")
texto.penup()
texto.hideturtle()
texto.goto(0,260)
texto.write("Score: {}        High Score: {}".format(score, high_score),
        align = "center", font = ("Courier", 24, "normal"))


#Funciones y direcciones

def arriba():
    cabeza.direction="up"
def abajo():
    cabeza.direction="down"
def derecha():
    cabeza.direction="right"
def izquierda():
    cabeza.direction="left"
    
def mov():
    if cabeza.direction=="up":
        y=cabeza.ycor()
        cabeza.sety(y + 20)

    if cabeza.direction=="down":
        y=cabeza.ycor()
        cabeza.sety(y - 20)

    if cabeza.direction=="right":
        x=cabeza.xcor()
        cabeza.setx(x + 20)

    if cabeza.direction=="left":
        x=cabeza.xcor()
        cabeza.setx(x - 20)
        
#Conectar teclado
wn.listen()
wn.onkeypress(arriba, "Up")
wn.onkeypress(abajo, "Down")
wn.onkeypress(derecha, "Right")
wn.onkeypress(izquierda, "Left")

#Formato que tienen todos los juegos (bucle principal)
while True:
    wn.update()

#Colisiones bordes
    if cabeza.xcor() >280 or cabeza.xcor() <-290 or cabeza.ycor()>290 or cabeza.ycor()<-290:
        time.sleep(1)
        cabeza.goto(0,0)
        cabeza.direction="stop"

        #Esconder los segmentos al perder
        for segmento in segmentos:
            segmento.goto(2000,2000)

        #Limpiar lista de segmentos
        segmentos.clear()

        #Resetear score
        score = 0
        texto.clear()
        texto.write("Score: {}        High Score: {}".format(score, high_score),
                align = "center", font = ("Courier", 24, "normal"))
            

    
#Colisión cabeza-comida
    if cabeza.distance(comida)<20:
        
#Reaparición de la comida   
       x=random.randint(-280,280)
       y=random.randint(-280,280)
       comida.goto(x,y)
       
#Cuerpo de la serpiente al tocar comida
       cuerpo=turtle.Turtle()
       cuerpo.speed(0)
       cuerpo.shape("square")
       cuerpo.color("grey")
       cuerpo.penup()
       segmentos.append(cuerpo)

       #Aumentar marcador
       score += 10

    if score > high_score:
        high_score = score
           
    texto.clear()
    texto.write("Score: {}        High Score: {}".format(score, high_score),
            align = "center", font = ("Courier", 24, "normal"))

#Mover el cuerpo de la serpiente
    totalSeg=len(segmentos)
    for index in range(totalSeg -1, 0, -1):
        x=segmentos[index-1].xcor()
        y=segmentos[index-1].ycor()
        segmentos[index].goto(x,y)

    if totalSeg > 0:
        x=cabeza.xcor()
        y=cabeza.ycor()
        segmentos[0].goto(x,y)
    
  

    mov()

    #Colisión con el cuerpo
    for segmento in segmentos:
        if segmento.distance(cabeza) < 20:
            time.sleep(1)
            cabeza.goto(0,0)
            cabeza.direction = "stop"

            #Esconder segmentos
            for segmento in segmentos:
                segmento.goto(1000,1000)
            segmentos.clear()

            #Resetear marcador
            score = 0
            texto.clear()
            texto.write("Score: {}        High Score: {}".format(score, high_score),
                    align = "center", font = ("Courier", 24, "normal"))
    
    time.sleep(posponer)
    

    
